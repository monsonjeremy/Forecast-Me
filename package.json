{
  "name": "forecast-me",
  "version": "0.0.3-beta",
  "config": {
    "imageRepo": "707941731089.dkr.ecr.us-west-2.amazonaws.com/forecastme-prod",
    "imageName": "forecastme-prod",
    "imagePort": "80",
    "awsRegion": "us-west-2",
    "awsEcsCluster": "prod-ecs-cluster",
    "awsService": "forecastme"
  },
  "license": "MIT",
  "description": "Forecasting Aggregation Site",
  "repository": "https://github.com/monsonjeremy/Forecast-Me",
  "main": "index.js",
  "author": "Jeremy Monson",
  "devDependencies": {
    "babel-eslint": "^8.0.1",
    "eslint": "^4.7.1",
    "eslint-config-airbnb": "^15.1.0",
    "eslint-config-prettier": "^2.6.0",
    "eslint-config-react-app": "1.0.5",
    "eslint-loader": "1.9.0",
    "eslint-plugin-compat": "^1.0.4",
    "eslint-plugin-flowtype": "^2.39.1",
    "eslint-plugin-import": "^2.6.1",
    "eslint-plugin-jsx-a11y": "5.1.1",
    "eslint-plugin-prettier": "^2.3.1",
    "eslint-plugin-react": "^7.1.0",
    "flow-bin": "^0.54.1",
    "husky": "^0.14.3",
    "jest": "21.1.0",
    "lint-staged": "^4.3.0",
    "npm-run-all": "^4.1.2",
    "prettier": "^1.7.4"
  },
  "scripts": {
    "start:client:dev": "cd client && npm start",
    "build:client:dev": "cd client && npm run build-css && npm run build",
    "start:server:dev": "cd server && npm run start:server:dev",
    "build:server:dev": "cd server && npm run build:server:dev",
    "build:client:prod": "cd client && npm install && npm run build",
    "start:app:prod": "cd server && npm run start:server:prod",
    "build:server:prod": "cd server && npm install && npm run build:server:prod",
    "test": "npx eslint client/src server && npx flow",
    "precommit": "npm run test",
    "prepush": "npm run test",
    "docker:open:local":
      "echo Trying to launch on MacOS && sleep 2 && URL=http://localhost:3005 && open $URL",
    "docker:build:local":
      "docker-compose -f ./docker-compose/local.yml -p forecast-me-dev up --force-recreate --build && sleep 2 && npm run docker:open:local",
    "docker:build:prod":
      "docker-compose -f ./docker-compose/prod.yml -p forecast-me-prod up --force-recreate --build",
    "docker:build:deploy":
      "docker image build . -t $npm_package_config_imageRepo:$npm_package_version",
    "postdocker:build:deploy": "npm run docker:tag:deploy",
    "docker:tag:deploy":
      "docker image tag $npm_package_config_imageRepo:$npm_package_version $npm_package_config_imageRepo:latest",
    "predocker:publish": "echo Attention! Ensure `docker login` is correct.",
    "docker:publish": "docker image push $npm_package_config_imageRepo:$npm_package_version",
    "postdocker:publish": "docker image push $npm_package_config_imageRepo:latest",
    "docker:clean": "docker rm -f $npm_package_config_imageName",
    "docker:full:clean": "docker stop $(docker ps -aq) && docker rm $(docker ps -aq)",
    "aws:login":
      "eval $(aws ecr get-login --no-include-email --region $npm_package_config_awsRegion)",
    "aws:deploy":
      "docker run --env-file ./.aws silintl/ecs-deploy -c $npm_package_config_awsEcsCluster -n $npm_package_config_awsService -i $npm_package_config_imageRepo:latest -r $npm_package_config_awsRegion --timeout 1000",
    "aws:release": "run-s aws:login docker:build:deploy docker:tag:deploy docker:publish aws:deploy"
  },
  "lint-staged": {
    "*.{js,jsx,json}": [
      "./node_modules/.bin/prettier --write",
      "./node_modules/.bin/eslint --fix",
      "git add"
    ],
    "*.{scss,css}": ["./node_modules/.bin/prettier --write", "git add"]
  },
  "jest": {
    "collectCoverageFrom": ["client/src/**/*.{js,jsx}"],
    "setupFiles": ["<rootDir>client/config/polyfills.js"],
    "testMatch": [
      "<rootDir>/client/src/**/__tests__/**/*.js?(x)",
      "<rootDir>/client/src/**/?(*.)(spec|test).js?(x)"
    ],
    "testEnvironment": "node",
    "testURL": "http://localhost:3005",
    "transform": {
      "^.+\\.(js|jsx)$": "<rootDir>/node_modules/babel-jest",
      "^.+\\.css$": "<rootDir>/client/config/jest/cssTransform.js",
      "^(?!.*\\.(js|jsx|css|json)$)": "<rootDir>/config/jest/fileTransform.js"
    },
    "transformIgnorePatterns": ["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],
    "moduleNameMapper": {
      "^react-native$": "react-native-web"
    }
  }
}
